from fastapi import APIRouter, Depends, HTTPException,Query,BackgroundTasks, Request, Response,UploadFile,Cookie, WebSocket,WebSocketDisconnectfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestFormfrom app.api.pydanticmodels import UserLogin, UserRegistrationfrom app.db.session import get_dbfrom app.services.crud.user_service import UserServicerouter = APIRouter()oauth2_scheme = OAuth2PasswordBearer(tokenUrl="tokenlogin")def get_current_user(token: str =  Depends(oauth2_scheme)):    '''    return current user    '''    user_service = UserService()    return user_service.get_current_user(token)@router.post("/register")async def register(request_data: UserRegistration, db = Depends(get_db)):    '''    register user    '''    user_service = UserService()    firstname = request_data.firstname    lastname = request_data.lastname    email = request_data.email    password = request_data.password    if not (firstname and lastname and email and password):        raise HTTPException(status_code=422, detail="Missing required fields")    return  await user_service.register(firstname,lastname,email, password, db)@router.post("/login")async def login_for_access_token(request_data: UserLogin, db = Depends(get_db)):    '''    login_for_access_token    '''    user_service = UserService()    email = request_data.email    password = request_data.password    if not (email and password):        raise HTTPException(status_code=422, detail="Missing required fields")    return user_service.login(email, password, db)
