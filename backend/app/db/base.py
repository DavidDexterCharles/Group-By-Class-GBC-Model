# pylint: disable=C0115:missing-class-docstring,C0114:missing-module-docstring,C0301:line-too-long# pylint: disable=W0612:unused-variablefrom sqlalchemy import create_enginefrom sqlalchemy.ext.declarative import declarative_basefrom sqlalchemy.orm import sessionmaker,scoped_sessionfrom app.services.environment import EnvironmentVariableService as envSQLALCHEMY_DATABASE_URL=env.get("SQLALCHEMY_DATABASE_URL")engine = create_engine(SQLALCHEMY_DATABASE_URL)# SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)SessionLocal = scoped_session(sessionmaker(autocommit=False, autoflush=False, bind=engine))# when working in a multi-threaded environment, consider using thread-local sessions. SQLAlchemy provides scoped_session for this purposeBase = declarative_base()# db/base.py# from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession# from sqlalchemy.ext.declarative import declarative_base# from sqlalchemy.orm import sessionmaker, scoped_session# from app.config.config import useenv# SQLALCHEMY_DATABASE_URL = useenv("SQLALCHEMY_DATABASE_URL_ASYNC")# engine = create_async_engine(SQLALCHEMY_DATABASE_URL, echo=True)#,connect_args={"timeout": 30})# # AsyncSessionLocal = scoped_session(sessionmaker(autocommit=False, autoflush=False, bind=engine, class_=AsyncSession))# AsyncSessionLocal = (sessionmaker(autocommit=False, autoflush=False, bind=engine, class_=AsyncSession))# Base = declarative_base()
